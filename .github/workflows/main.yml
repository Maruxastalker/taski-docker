name: Main Taski workflow

on:
  push:
    branches:
      - master

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r ./backend/requirements.txt 
    - name: Test with flake8 and django tests
      env:
        POSTGRES_USER: django_user
        POSTGRES_PASSWORD: django_password
        POSTGRES_DB: django_db
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
      run: |
        python -m flake8 backend/
        cd backend/
        python manage.py test
  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }} 
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/taski_backend:latest
  frontend_tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up nodeJS
      uses: actions/setup-node@v3
      with:
        node-version: 18
    - name: Install dependencies
      run: |
        cd frontend/
        npm ci
    - name: Test frontend
      run: |
        cd frontend/
        npm run test
  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/taski_frontend:latest
  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./gateway/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/taski_gateway:latest
  deploy:
    runs-on: ubuntu-latest
    needs: 
      - build_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Test SSH connection
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            echo "✅ SSH connection successful!"
            mkdir -p taski
            ls -la

      - name: Create docker-compose file on server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cat > taski/docker-compose.production.yml << 'EOF'
            version: '3'

            volumes:
              pg_data:
              static:

            services:
              db:
                image: postgres:13
                env_file: .env
                volumes:
                  - pg_data:/var/lib/postgresql/data
                
              backend:
                image: ${{ secrets.DOCKER_USERNAME }}/taski_backend:latest
                env_file: .env
                volumes:
                  - static:/app/collected_static
                command: >
                  sh -c "python manage.py migrate &&
                        gunicorn --bind 0.0.0.0:8000 backend.wsgi:application"
                
              frontend:
                image: ${{ secrets.DOCKER_USERNAME }}/taski_frontend:latest
                env_file: .env
                volumes:
                  - static:/static
                
              gateway:
                image: ${{ secrets.DOCKER_USERNAME }}/taski_gateway:latest
                volumes:
                  - static:/staticfiles
                ports:
                  - 8000:80
            EOF
            echo "✅ docker-compose.production.yml created successfully!"

      - name: Create .env file on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cat > taski/.env << 'EOF'
            POSTGRES_DB=django
            POSTGRES_USER=django_user
            POSTGRES_PASSWORD=mysecretpassword
            DB_HOST=db
            DB_PORT=5432
            POSTGRES_HOST_AUTH_METHOD=trust
            EOF
            echo "✅ .env file created successfully!"

      - name: Deploy application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd taski
            echo "Pulling latest images..."
            sudo docker compose -f docker-compose.production.yml pull
            echo "Stopping existing containers..."
            sudo docker compose -f docker-compose.production.yml down
            echo "Removing old volumes..."
            sudo docker volume prune -f
            echo "Starting new containers..."
            sudo docker compose -f docker-compose.production.yml up -d
            echo "Waiting for backend to start..."
            sleep 20
            echo "Running migrations..."
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate --no-input
            echo "Collecting static files..."
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --no-input
            echo "Restarting backend to apply changes..."
            sudo docker compose -f docker-compose.production.yml restart backend
            echo "✅ Deployment completed successfully!"